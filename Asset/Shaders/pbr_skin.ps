#include "common.fxh"
#include "pbr_common.fxh"

TextureCube tIrradianceMap;
SamplerState sIrradianceMapSamplerState;

TextureCube tEnvMap;
SamplerState sEnvMapSamplerState;

Texture2D LutTex;
SamplerState sLutTexSamplerState;

float4 main(PBR_PIXEL_INPUT input) : SV_TARGET
{

    float roughness = pbrParameter.x;
    float metallic = pbrParameter.y;

    float3 N = input.normal;
    float3 V = normalize(camPos - input.wpos);
    float3 albedo = debugColor.rgb;
    float3 R = reflect(-V, N);

    float3 F0 = float3(0.04, 0.04, 0.04); 
    F0 = lerp(F0, albedo, metallic);

    float3 L = normalize(sunLightDir.xyz);	// sum direction
    float3 H = normalize(V + L);
    float3 radiance = sunLightColor.xyz;

    float NDF = DistributionGGX(N, H, roughness);   
    float G = GeometrySmith(N, V, L, roughness);  
    float3 F = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);

    float3 nominator    = NDF * G * F; 
    float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
    float3 specular = nominator / denominator;

    float3 kS = F;
    float3 kD = float3(1.0, 1.0, 1.0) - kS;
    kD *= 1.0 - metallic;
    float NdotL = max(dot(N, L), 0.0); 

    float3 lo = (kD * albedo / PI + specular) * radiance * NdotL;

	float3 _F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
	float3 _ks = F;
	float3 _kd = float3(1.0, 1.0, 1.0) - _ks;
	_kd *= 1.0 - metallic;

	float3 irradiance = tIrradianceMap.Sample(sEnvMapSamplerState, N).rgb;
	irradiance = pow(irradiance, float3(2.2, 2.2, 2.2));
	float3 diffuse = irradiance * albedo;

	float MAX_REFLECTION_LOD = 5.0;
	float3 prefilteredColor = tEnvMap.SampleLevel(sEnvMapSamplerState, R, roughness * MAX_REFLECTION_LOD).rgb;
	prefilteredColor = pow(prefilteredColor, float3(2.2, 2.2, 2.2));

	float x = max(dot(N, V), 0.0);
	float y = roughness;
	float2 cood = float2(x, y);
	float2 brdf = LutTex.Sample(sLutTexSamplerState, cood).rg;
	float3 _specular = prefilteredColor * (_F * brdf.x + brdf.y);

	float3 ambient = _kd * diffuse + _specular;
	//float3 ambient = float3(0.03, 0.03, 0.03) * albedo;

    float3 color = lo + ambient;

    // HDR tonemapping
    // color = color / 8;
	color = color / (color + float3(1.0, 1.0, 1.0));
    // gamma correct
    float gamma = 1.0/2.2;
    color = pow(color, float3(gamma, gamma, gamma)); 

    return float4(color.r, color.g, color.b, 1.0);
}